package  {		import flash.display.MovieClip;	import flash.geom.ColorTransform;	import flash.events.MouseEvent;	import flash.events.Event;	import cores;	import mapColor;	import palette;			// classe de regiao de mapa	public class regiao extends MovieClip {				// nome do evento que é gerado sempre que colorir uma regiao resulta num conflito		public static const CONFLITO:String = "regiaoConflito";		// nome do evento que e gerado sempre que é tentada uma mudanca de cor numa regiao 		public static const MUDACOR:String = "regiaoMudaCor";				// array com regioes adjacentes		var adjacencias : Array = new Array();				// cor por defeito		public var cor : uint = cores.BRANCO;				// construtor		public function regiao() {			// coloca a cor por defeito			this.setCor = cor;			// regista evento click			addEventListener(MouseEvent.CLICK,onClickRegiao);		}				// muda a cor		public function onClickRegiao(e:MouseEvent) {			// sempre que regiao é clickada (tentativa de mudanca de cor)			// evento bubbling para ser apanhado mais acima na hierarquia			dispatchEvent(new Event(regiao.MUDACOR,true)); ;					}				// regista adjacencias		public function set setAdjacencias(a) {			adjacencias=a;		}				// mostra adjacencias		public function mostraAdjacencias() {			for each (var adj in adjacencias) {				trace(adj);			}		}				// verifica conflito (sai logo que detectado um conflito)		// devolve um booleano (true ou false)		public function checkConflito() {			var conflito : Boolean = false;			if (cor != cores.BRANCO) {				for each (var adj in adjacencias) {					if (adj.cor == cor) {						//trace(adj.name);						conflito = true;						break;					}				}			}			return(conflito);		}				// muda uma cor através de uma transformação		public function set setCor(cor) {			transform.colorTransform = cores.corT[cor];			this.cor = cor;			if (checkConflito()) {				// evnto bubbling para ser apanhado mais acima na hierarquia				dispatchEvent(new Event(regiao.CONFLITO,true));			}		}			}	}