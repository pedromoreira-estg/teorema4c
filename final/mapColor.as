package  {		import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.system.fscommand;	import flash.display.StageDisplayState;	import showstatus;		// aplicação	public class mapColor extends MovieClip {				// posicionamento na interface do mapa		public static const mapX : int = 36;		public static const mapY : int = 96;				// posicionamento na interface da moldura do mapa		public static const frameX : int = 41;		public static const frameY : int = 90;				// escala do mapa		public static const mapS : Number = 1.0;				// som de conflito nas regioes		var myooo = new ooo();		var myyyy = new yyy();				// a palette		mypal: palette;			// a frame		var myframe  = new mapframe();		// array de mapas		var mymaps:Array = new Array();				// mapas disponíveis na biblioteca		var mymap1 = new map1();		var mymap2 = new map2();		var mymap3 = new map3();				// numero de mapas		var mynmaps;				// botoes para mapa seguinte e anterior		mnext : bsmapa;		mprev : bsmapa;				// botoes para info e mais info		binfo : 		// indicador de status		mstatus : showstatus;				// informação		var minfo : info = new info();				// mais info		var mmais : maisinfo = new maisinfo();				// botao de reset do mapa		mreset : breset;				// mapa activo		var activemap = 0;				// mapa activo		var themap : map;				public function mapColor() {		// inicializa			fscommand("fullscreen", "true");      fscommand("allowscale", "false");			fscommand("showmenu", "false");			stage.displayState = StageDisplayState.FULL_SCREEN;					   myframe.x = frameX;		   myframe.y = frameY;			 			 mmais.x = frameX;			 mmais.y = frameY;			 minfo.x = frameX;			 minfo.y = frameY;			       //mymap2.scaleX = mymap2.scaleY = .2;			initMapas();			//addChild(mypal);			loadMapa(mymaps[activemap]);			//themap = mymaps[activemap];						// posicionar ao centro			// eventos			mnext.addEventListener(MouseEvent.CLICK,onmapnext);			mprev.addEventListener(MouseEvent.CLICK,onmapprev);						addEventListener(regiao.CONFLITO,onconflito);						addEventListener(regiao.MUDACOR,onmudacor);						addEventListener(map.MUDA,onmuda);			mreset.addEventListener(MouseEvent.CLICK,onmapreset);			binfo.addEventListener(MouseEvent.CLICK,oninfo);			bmais.addEventListener(MouseEvent.CLICK,onmais);		}				public function onmudacor(e:Event) {			// apenas se realmente muda de cor			if (mypal.getCor != e.target.cor) {				trace("mudou de cor",e.target.name);				e.target.setCor = mypal.getCor;			}		}				public function oninfo(e:MouseEvent) {			showinfo();			minfo.addEventListener(MouseEvent.CLICK,onquit);		}				public function onmais(e:MouseEvent) {			showmais();			mmais.addEventListener(MouseEvent.CLICK,onquit);		}				public function onquit(e:MouseEvent) {			var mc = e.target as MovieClip;			mc.removeEventListener(MouseEvent.CLICK,onquit);			removeChild(mc);		}				public function showinfo() {			hidemais();			addChild(minfo);					}		public function hideinfo() {			if (minfo.parent) removeChild(minfo);		}				public function showmais() {			hideinfo();			addChild(mmais);					}				public function hidemais() {			if (mmais.parent) removeChild(mmais);					}				public function onmapreset(e:MouseEvent) {			mymaps[activemap].resetMap();		}				public function onmuda(e:Event) {			//trace(e.target);			trace("---------------- REPORT -------------");			trace("completo :", e.target.completitude);			trace("correto  :", e.target.correcao);									// tentar evitar duplicar som			if (e.target.correcao && e.target.completitude) {				myyyy.play();				mstatus.estado = showstatus.RESOLVIDO;			} else if (!e.target.correcao) {				mstatus.estado = showstatus.INCORRETO;			} else {				mstatus.estado = showstatus.INCOMPLETO;			}			/*			if (e.target.completitute) {				// botao			} else {				// botao			}						if (e.target.correcao) {				// botao			} else {				// botao			}*/			// mudar os botoes					}				public function onconflito(e:Event) {			//trace("ola - conflito");			myooo.play();		}				public function onmappal(e:MouseEvent) {			var b = e.target as bcolor;			//trace(b)			b.on();					}		public function nextMapa() {			removeChild(mymaps[activemap]);			activemap = (activemap + 1) % mynmaps;			loadMapa(activemap);		}				public function prevMapa() {			removeChild(mymaps[activemap]);			activemap = (activemap + mynmaps -1) % mynmaps;	// para nao dar negativo			loadMapa(activemap);		}						public function loadMapa(mapa) {			trace(myframe.parent);			if (myframe.parent) removeChild(myframe);			mymaps[activemap].resetMap();			mymaps[activemap].x = mapX;			mymaps[activemap].y = mapY;			mymaps[activemap].scaleX = mymaps[activemap].scaleY = mapS;			// escalar para dimensões conhecidas (supondo quadrado)			//mymaps[activemap].scaleX = 2;			//mymaps[activemap].scaleY = 2;			// adicionar ao stage (tornar visivel)			addChild(mymaps[activemap]);			addChildAt(myframe,getChildIndex(mymaps[activemap])+1);		}				private function onmapnext(e:MouseEvent) {			nextMapa();			trace("next",activemap);			mstatus.estado = showstatus.INCOMPLETO;		}				private function onmapprev(e:MouseEvent) {			prevMapa();			trace("prev", activemap);			mstatus.estado = showstatus.INCOMPLETO;		}						function initMapas() {			// mapa X			var c : map;		  c = mymap2;			mymaps.push(c);						c.regioes.push(c.rrr1);			c.regioes.push(c.rrr2);			c.regioes.push(c.rrr3);			c.regioes.push(c.rrr4);			c.regioes.push(c.rrr5);			c.regioes.push(c.rrr6);			c.regioes.push(c.rrr7);			c.regioes.push(c.rrr8);			c.regioes.push(c.rrr9);			c.regioes.push(c.rrr10);			c.regioes.push(c.rrr11);			c.regioes.push(c.rrr12);			c.regioes.push(c.rrr13);			c.regioes.push(c.rrr14);			c.regioes.push(c.rrr15);			c.regioes.push(c.rrr16);			c.regioes.push(c.rrr17);			c.regioes.push(c.rrr18);			c.regioes.push(c.rrr19);			c.regioes.push(c.rrr20);			c.regioes.push(c.rrr21);			c.regioes.push(c.rrr22);			c.regioes.push(c.rrr23);			c.regioes.push(c.rrr24);			c.regioes.push(c.rrr25);			c.regioes.push(c.rrr26);			c.regioes.push(c.rrr27);			c.regioes.push(c.rrr28);			c.regioes.push(c.rrr29);			c.regioes.push(c.rrr30);			c.regioes.push(c.rrr31);			c.regioes.push(c.rrr32);			c.regioes.push(c.rrr33);						c.rrr1.setAdjacencias = new Array(c.rrr2,c.rrr7,c.rrr15);			c.rrr2.setAdjacencias = new Array(c.rrr1,c.rrr7,c.rrr3);			c.rrr3.setAdjacencias = new Array(c.rrr2,c.rrr4,c.rrr8,c.rrr21);			c.rrr4.setAdjacencias = new Array(c.rrr3,c.rrr8,c.rrr5,c.rrr6,c.rrr10,c.rrr9,c.rrr23);			c.rrr5.setAdjacencias = new Array(c.rrr4,c.rrr6);			c.rrr6.setAdjacencias = new Array(c.rrr5,c.rrr4,c.rrr12,c.rrr13,c.rrr14,c.rrr27);			c.rrr7.setAdjacencias = new Array(c.rrr1,c.rrr2,c.rrr21,c.rrr16,c.rrr15);			c.rrr8.setAdjacencias = new Array(c.rrr3,c.rrr4,c.rrr22);			c.rrr9.setAdjacencias = new Array(c.rrr4,c.rrr10,c.rrr24);			c.rrr10.setAdjacencias = new Array(c.rrr4,c.rrr12,c.rrr11,c.rrr24,c.rrr9);			c.rrr11.setAdjacencias = new Array(c.rrr10,c.rrr12,c.rrr13,c.rrr25,c.rrr24);			c.rrr12.setAdjacencias = new Array(c.rrr10,c.rrr6,c.rrr11);			c.rrr13.setAdjacencias = new Array(c.rrr11,c.rrr6,c.rrr26);			c.rrr14.setAdjacencias = new Array(c.rrr6,c.rrr26);			c.rrr15.setAdjacencias = new Array(c.rrr1,c.rrr7,c.rrr16);			c.rrr16.setAdjacencias = new Array(c.rrr7,c.rrr15,c.rrr21,c.rrr28,c.rrr30,c.rrr17);			c.rrr17.setAdjacencias = new Array(c.rrr16,c.rrr31,c.rrr18);			c.rrr18.setAdjacencias = new Array(c.rrr17,c.rrr32,c.rrr19);			c.rrr19.setAdjacencias = new Array(c.rrr18,c.rrr33,c.rrr20);			c.rrr20.setAdjacencias = new Array(c.rrr19,c.rrr26);			c.rrr21.setAdjacencias = new Array(c.rrr16,c.rrr7,c.rrr3,c.rrr22);			c.rrr22.setAdjacencias = new Array(c.rrr28,c.rrr21,c.rrr8,c.rrr23);			c.rrr23.setAdjacencias = new Array(c.rrr22,c.rrr4,c.rrr24,c.rrr29);			c.rrr24.setAdjacencias = new Array(c.rrr30,c.rrr29,c.rrr23,c.rrr9,c.rrr10,c.rrr11);			c.rrr25.setAdjacencias = new Array(c.rrr11,c.rrr26);				c.rrr26.setAdjacencias = new Array(c.rrr31,c.rrr25,c.rrr13,c.rrr27,c.rrr14,c.rrr20,c.rrr33);			c.rrr27.setAdjacencias = new Array(c.rrr26,c.rrr6);			c.rrr28.setAdjacencias = new Array(c.rrr16,c.rrr29,c.rrr22);			c.rrr29.setAdjacencias = new Array(c.rrr28,c.rrr30,c.rrr24,c.rrr23);			c.rrr30.setAdjacencias = new Array(c.rrr16,c.rrr31,c.rrr24,c.rrr29);			c.rrr31.setAdjacencias = new Array(c.rrr17,c.rrr30,c.rrr26,c.rrr32);			c.rrr32.setAdjacencias = new Array(c.rrr18,c.rrr31,c.rrr33);			c.rrr33.setAdjacencias = new Array(c.rrr32,c.rrr26,c.rrr19);								  c = mymap3;			mymaps.push(c);			c.regioes.push(c.m3_RR01);			c.regioes.push(c.m3_RR02);			c.regioes.push(c.m3_RR03);			c.regioes.push(c.m3_RR04);			c.regioes.push(c.m3_RR05);			c.regioes.push(c.m3_RR06);			c.regioes.push(c.m3_RR07);			c.regioes.push(c.m3_RR08);			c.regioes.push(c.m3_RR09);			c.regioes.push(c.m3_RR10);			c.regioes.push(c.m3_RR11);			c.regioes.push(c.m3_RR12);			c.regioes.push(c.m3_RR13);			c.regioes.push(c.m3_RR14);			c.regioes.push(c.m3_RR15);			c.regioes.push(c.m3_RR16);			c.regioes.push(c.m3_RR17);			c.regioes.push(c.m3_RR18);			c.regioes.push(c.m3_RR19);			c.regioes.push(c.m3_RR20);			c.regioes.push(c.m3_RR21);			c.regioes.push(c.m3_RR22);			c.regioes.push(c.m3_RR23);			c.regioes.push(c.m3_RR24);			c.regioes.push(c.m3_RR25);			c.regioes.push(c.m3_RR26);			c.regioes.push(c.m3_RR27);			c.regioes.push(c.m3_RR28);			c.regioes.push(c.m3_RR29);			c.regioes.push(c.m3_RR30);			c.regioes.push(c.m3_RR31);						c.m3_RR01.setAdjacencias=new Array(c.m3_RR02,c.m3_RR07,c.m3_RR06,c.m3_RR05);			c.m3_RR02.setAdjacencias=new Array(c.m3_RR01,c.m3_RR07,c.m3_RR03);			c.m3_RR03.setAdjacencias=new Array(c.m3_RR02,c.m3_RR07,c.m3_RR09,c.m3_RR14,c.m3_RR10,c.m3_RR04);			c.m3_RR04.setAdjacencias=new Array(c.m3_RR03,c.m3_RR10);			c.m3_RR05.setAdjacencias=new Array(c.m3_RR01,c.m3_RR06);			c.m3_RR06.setAdjacencias=new Array(c.m3_RR01,c.m3_RR05,c.m3_RR11,c.m3_RR12,c.m3_RR07);			c.m3_RR07.setAdjacencias=new Array(c.m3_RR01,c.m3_RR02,c.m3_RR03,c.m3_RR09,c.m3_RR08,c.m3_RR13,c.m3_RR12,c.m3_RR06);			c.m3_RR08.setAdjacencias=new Array(c.m3_RR07,c.m3_RR09,c.m3_RR13);			c.m3_RR09.setAdjacencias=new Array(c.m3_RR07,c.m3_RR13,c.m3_RR14,c.m3_RR23,c.m3_RR22,c.m3_RR20,c.m3_RR18,c.m3_RR13,c.m3_RR08);			c.m3_RR10.setAdjacencias=new Array(c.m3_RR03,c.m3_RR04,c.m3_RR15,c.m3_RR16,c.m3_RR14,c.m3_RR05);			c.m3_RR11.setAdjacencias=new Array(c.m3_RR06,c.m3_RR12,c.m3_RR13,c.m3_RR17);			c.m3_RR12.setAdjacencias=new Array(c.m3_RR06,c.m3_RR07,c.m3_RR13,c.m3_RR11);			c.m3_RR13.setAdjacencias=new Array(c.m3_RR11,c.m3_RR12,c.m3_RR07,c.m3_RR08,c.m3_RR09,c.m3_RR18,c.m3_RR17);			c.m3_RR14.setAdjacencias=new Array(c.m3_RR09,c.m3_RR03,c.m3_RR10,c.m3_RR16,c.m3_RR23);			c.m3_RR15.setAdjacencias=new Array(c.m3_RR10,c.m3_RR16,c.m3_RR27,c.m3_RR28,c.m3_RR30);			c.m3_RR16.setAdjacencias=new Array(c.m3_RR14,c.m3_RR10,c.m3_RR15,c.m3_RR23,c.m3_RR24,c.m3_RR26,c.m3_RR27);			c.m3_RR17.setAdjacencias=new Array(c.m3_RR11,c.m3_RR13,c.m3_RR18,c.m3_RR19);			c.m3_RR18.setAdjacencias=new Array(c.m3_RR17,c.m3_RR13,c.m3_RR09,c.m3_RR20,c.m3_RR21,c.m3_RR19);			c.m3_RR19.setAdjacencias=new Array(c.m3_RR17,c.m3_RR18,c.m3_RR20,c.m3_RR21);			c.m3_RR20.setAdjacencias=new Array(c.m3_RR18,c.m3_RR09,c.m3_RR22,c.m3_RR21);			c.m3_RR21.setAdjacencias=new Array(c.m3_RR18,c.m3_RR19,c.m3_RR20,c.m3_RR22);			c.m3_RR22.setAdjacencias=new Array(c.m3_RR21,c.m3_RR20,c.m3_RR09,c.m3_RR23, c.m3_RR25,c.m3_RR29);			c.m3_RR23.setAdjacencias=new Array(c.m3_RR22,c.m3_RR09,c.m3_RR14,c.m3_RR16,c.m3_RR24,c.m3_RR25);			c.m3_RR24.setAdjacencias=new Array(c.m3_RR25,c.m3_RR23,c.m3_RR16,c.m3_RR26);			c.m3_RR25.setAdjacencias=new Array(c.m3_RR23,c.m3_RR24,c.m3_RR26,c.m3_RR29, c.m3_RR22);				c.m3_RR26.setAdjacencias=new Array(c.m3_RR25,c.m3_RR24,c.m3_RR16,c.m3_RR27,c.m3_RR29);			c.m3_RR27.setAdjacencias=new Array(c.m3_RR26,c.m3_RR16,c.m3_RR15,c.m3_RR28,c.m3_RR29);			c.m3_RR28.setAdjacencias=new Array(c.m3_RR27,c.m3_RR15,c.m3_RR30,c.m3_RR31);			c.m3_RR29.setAdjacencias=new Array(c.m3_RR22,c.m3_RR25,c.m3_RR26,c.m3_RR27);			c.m3_RR30.setAdjacencias=new Array(c.m3_RR31,c.m3_RR28,c.m3_RR15);			c.m3_RR31.setAdjacencias=new Array(c.m3_RR28,c.m3_RR30);						c = mymap1;			mymaps.push(c);						c.regioes.push(c.rr1);			c.regioes.push(c.rr2);			c.regioes.push(c.rr3);			c.regioes.push(c.rr4);			c.regioes.push(c.rr5);			c.regioes.push(c.rr6);			c.regioes.push(c.rr7);			c.regioes.push(c.rr8);			c.regioes.push(c.rr9);			c.regioes.push(c.rr10);			c.regioes.push(c.rr11);			c.regioes.push(c.rr12);			c.regioes.push(c.rr13);			c.regioes.push(c.rr14);			c.regioes.push(c.rr15);			c.regioes.push(c.rr16);			c.regioes.push(c.rr17);			c.regioes.push(c.rr18);			c.regioes.push(c.rr19);			c.regioes.push(c.rr20);									c.rr1.setAdjacencias= new Array(c.rr17,c.rr10,c.rr2,c.rr5,c.rr8,c.rr4);			c.rr2.setAdjacencias= new Array(c.rr3,c.rr5,c.rr6,c.rr1,c.rr14,c.rr13,c.rr11,c.rr10);			c.rr3.setAdjacencias= new Array(c.rr6,c.rr7,c.rr2,c.rr4,c.rr14,c.rr20);			c.rr4.setAdjacencias= new Array(c.rr1,c.rr3,c.rr8,c.rr7,c.rr17,c.rr20,c.rr18);			c.rr5.setAdjacencias= new Array(c.rr1,c.rr2,c.rr8,c.rr6,c.rr9);			c.rr6.setAdjacencias= new Array(c.rr5,c.rr2,c.rr3,c.rr7,c.rr9);			c.rr7.setAdjacencias= new Array(c.rr4,c.rr3,c.rr6,c.rr8,c.rr9);			c.rr8.setAdjacencias= new Array(c.rr1,c.rr4,c.rr7,c.rr5,c.rr9);			c.rr9.setAdjacencias= new Array(c.rr5,c.rr6,c.rr7,c.rr8);			c.rr10.setAdjacencias= new Array(c.rr1,c.rr2,c.rr11);			c.rr11.setAdjacencias= new Array(c.rr10,c.rr2,c.rr12);			c.rr12.setAdjacencias= new Array(c.rr11,c.rr2,c.rr13);			c.rr13.setAdjacencias= new Array(c.rr2,c.rr12,c.rr14,c.rr15);			c.rr14.setAdjacencias= new Array(c.rr3,c.rr2,c.rr13,c.rr15);			c.rr15.setAdjacencias= new Array(c.rr14,c.rr13);			c.rr16.setAdjacencias= new Array(c.rr18,c.rr17);			c.rr17.setAdjacencias= new Array(c.rr16,c.rr18,c.rr4,c.rr1);			c.rr18.setAdjacencias= new Array(c.rr16,c.rr17,c.rr4,c.rr20,c.rr19);			c.rr19.setAdjacencias= new Array(c.rr18);			c.rr20.setAdjacencias= new Array(c.rr18,c.rr4,c.rr3);						mynmaps = mymaps.length;		}			}	}